package Apples;

import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Nikky
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public static String IPnPort;
    public static String Username;
    public static String Password;
    
    
    public Main(java.awt.Frame parent) {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconImage(new ImageIcon(getClass().getResource("cc.png")).getImage());

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
                    .addComponent(jTextField1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        try{
            String temp = jTextField1.getText();
            jTextField1.setText("");
            try{
                temp = temp.replace("/", "!c ");
            }catch(Exception e){}
            try{
                Connect.writer.write(temp);
                Connect.writer.newLine();
                Connect.writer.flush();
            }catch(Exception e){}
        }catch(Exception e){}
        
    }                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Main dialog = new Main(new javax.swing.JFrame());
                String[] s = {"aPples"};
                GUI.main(s);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                
                dialog.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jTextArea1;
    private static javax.swing.JTextField jTextField1;
    // End of variables declaration                   

    public static class Connect extends Thread {

        public static BufferedReader reader;
        public static BufferedWriter writer;
        public static Socket sock;
        public static int Port;
        public static String IP;
        public void run(){
            sleep(1000);
            Clear();
            while(true){
                try{
                    getIPnPort();
                    sock = new Socket(IP, Port);
                    Println("Successfully Connected!");
                    try{
                        reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));
                        writer = new BufferedWriter(new OutputStreamWriter(sock.getOutputStream()));
                        Println("Successfully Aquired Streams!");
                        try{
                            new Inbox().start();
                            Println("Successfully Started Inboxer Thread");
                            sleep(500);
                            Println("Attempting to Login Now...");
                            Login();
                            break;
                        }catch(Exception e){Println("Error Starting Inboxer Thread");}
                    }catch(Exception e){Println("Error Aquiring Streams");}
                }catch(Exception e){Println("Error Connecting To The Server!");}
                sleep(1000);
                Print("Attempting to Connect again");
                sleep(500);
                Print(".");
                sleep(500);
                Print(".");
                sleep(500);
                Println(".");
                sleep(500);
                
            }
        }
        
        public static void Login(){
            try{
                writer.write("Login " + Username +":"+Password);
                writer.newLine();
                writer.flush();
            }catch(Exception e){}
        }
        public static void sleep(int Time){
            try{
                Thread.sleep(Time);
            }catch(Exception e){}
        }
        public static void getIPnPort(){
            try{
                String[] temp = IPnPort.split(":");
                IP = temp[0];
                Port = (int)Double.parseDouble(temp[1]);
                Println("Successfully Parsed IPnPort");
                Println("IP: " + IP + "\nPort: " + Port);
            }catch(Exception e){}
        }
        public static void Println(final String msg){
            EventQueue.invokeLater(new Runnable() {
                    public void run() {
                    jTextArea1.append(msg+"\n");
                    }
                });
        }
        public static void Clear(){
            EventQueue.invokeLater(new Runnable() {
                    public void run() {
                    jTextArea1.setText("");
                    }
                });
        }
        public static void Print(final String msg){
            EventQueue.invokeLater(new Runnable() {
                    public void run() {
                    jTextArea1.append(msg);
                    }
                });
        }


        public static class Inbox extends Thread{

            public void run(){
                String s;
                while(true){
                    try{
                        while((s = reader.readLine())!= null){
                            Println(f3(s));
                        }
                    }catch(Exception e){Println("Connection Died!");break;}
                }
            }
            public static String f3(String msg){
                try{
                    return f2(msg.replaceAll("\u001B\\[[;\\d]*m", ""));
                }catch(Exception e){return f2(msg);}
            }
            public static String f2(String msg){
                try{
                    return f1(msg).replace("[INFO] SimpleMessage[message=", "[INFO] ");
                }catch(Exception e){return f1(msg);}
            }
            
            public static String replaceLast(String text, String regex, String replacement) {
                return text.replaceFirst("(?s)"+regex+"(?!.*?"+regex+")", replacement);
            }
            
            public static String f1(String msg){
                try{
                    return replaceLast(msg,"]","");
                }catch(Exception e){return msg;}
            }
            /*
            public static String f1(String msg){
                try{
                    Pattern p = Pattern.compile("\\[[0-9]+;[0-9]+;[0-9]+m");
                    Matcher m = p.matcher(msg);
                    String temp = m.replaceAll("");
                    return temp;
                }catch(Exception e){return msg;}
            }*/
        }  
        public static String replaceLast(String text, String regex, String replacement) {
            return text.replaceFirst("(?s)"+regex+"(?!.*?"+regex+")", replacement);
        }
    }
}
